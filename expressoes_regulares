#Regex - Regular Expression

links 

#Metacaracteres

Meta        mnemônico       funcão
-----------------------------------
.	    ponto	    um caractere qualquer 

[...]	    lista	    lista de caracteres permitidos
                            <exemplo>
                            gato rato pato = [gpr]ato (gpr representa um caracter)

[^...]	    lista negada    lista de caracteres proibidos
                            <exemplo>
                            gato pato rato = [^r]ato arquivo.txt
                            ignora tudo que começa com 'r'

                            grep -E '[^r]ato' regex.txt (use grep -E para aplicar metacaracteres.



Obs o '^' dentro de uma lista, é uma lista negada, o que eu não quero.
o '^' fora de um colchete vai representar o inicio de uma linha. 



#QUANTIFICADORES
---------------

meta            mnemônico             função
--------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++
?               opcional              zero ou um
++++++++++++++++++++++++++++++++++++++++++++++++++
<exemplo>
grep -E '.?ato' regex.txt (pode ter um ou mais caracteres, começa com 1 caractere e pode ser opcional, uso para quando não sabemos se uma palavra esta singular ou plural)

grep -Ew '.?ato' regex.txt (-Ew restringe a apenas palavras)
-------------------------------------------------------------------------------



++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*               asterisco             zeroco, um ou mais
++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<exemplo>
grep -Ew '.*ato' regex.txt (* pega tudo, preocupando usá-lo em se a ideia 
é somente pegar palavras, o * pega tudo, ou seja frase inteira o que tiver
antes do .ato ele pega tudo )



+++++++++++++++++++++++++++++++++++++++++++++++++++++++
+               mais                  um ou mais
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
<exemplo>
grep -Ew '.+ato' regex.txt (+ - possui um ou mais caracteres)




+++++++++++++++++++++++++++++++++++++++++++++++++++++++
{n,m}           chaves                de n até m
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Usar quando for trabalhar em busca de IPs

<exemplo>
grep --color -Ew '.{2}\..{2,3}\..{2,3}\..{2,3}' regex.txt
grep --color -Ew '.{2}\..{2,3}\..{2,3}\..{2,3}' regex.txt (pode também usar o '^' inidicando que começa com 2 caracteres.

.{2} = primeiro octeto iniciando com 2 caracteres
.{2,3} = segundo octeto de 2 a 3 caracteres
.{2,3} = terceiro octeto de 2,3 caracteres
.{2,3} = quarto octeto de 2,3 caracteres

o '\.' força a leitura do caracter seguinte, no caso o '.' como literal.

Obs. Surprimento caractere letras, uma vez que ips não possui letras.
para isso use:
grep --color -Ew '^[0-9]{2}\.[0-9]{2,3}\.[0-9]{2,3}\.[0-9]{2,3}' - assim ira reconhecer apenas números
grep --color -Ew '^1[0-9]{2}\.[0-9]{2,3}\.[0-9]{2,3}\.[0-9]{2,3}'- digo para o primeiro octeto iniciar com número 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++
$           cifrão                fim de linha
+++++++++++++++++++++++++++++++++++++++++++++++**++++++
grep --color -Ew '^.{2}\..{2,3}\..{2,3}\..{2,3}$' (amarra inicio e fim de linha



#GRUPOS
Case: 
Digamos que necessite realizar busca por um termo em um arquivo, porém não sei se é Maiuscula ou Minuscula.

grep -E '(SQL|sql)' regex.txt  - busca tanto SQL maiusculo como minusculo



#ANCORAS

meta            mnemônico            função
-------------------------------------------
^

